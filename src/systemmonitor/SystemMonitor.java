/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systemmonitor;
import java.util.concurrent.TimeUnit;
import org.hyperic.sigar.*;
/**
 *
 * @author pawan
 */
public class SystemMonitor extends javax.swing.JFrame {

    

    /**
     * Creates new form SystemMonitor
     */
    public SystemMonitor() {
        initComponents();
        setTitle("System Monitor");
        setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        ProgressBarSystemMemory = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ProgressBarCPU = new javax.swing.JProgressBar();
        ProgressBarFileSystemUsage = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        ProcessParentPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        ProcessPanel = new javax.swing.JScrollPane();
        TextAreaProcess = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        NetworkTransmitted = new javax.swing.JLabel();
        NetworkRecieve = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(350, 500));
        setMinimumSize(new java.awt.Dimension(350, 500));

        jLabel1.setText("System Memory Usage");

        jLabel2.setText("CPU Usage");

        jLabel3.setText("File SystemUsage");

        ProcessParentPanel.setBackground(new java.awt.Color(254, 254, 254));

        jLabel4.setText("Process                        Command");

        ProcessPanel.setBackground(new java.awt.Color(249, 244, 238));

        TextAreaProcess.setColumns(20);
        TextAreaProcess.setRows(5);
        ProcessPanel.setViewportView(TextAreaProcess);

        javax.swing.GroupLayout ProcessParentPanelLayout = new javax.swing.GroupLayout(ProcessParentPanel);
        ProcessParentPanel.setLayout(ProcessParentPanelLayout);
        ProcessParentPanelLayout.setHorizontalGroup(
            ProcessParentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProcessParentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(ProcessPanel)
        );
        ProcessParentPanelLayout.setVerticalGroup(
            ProcessParentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProcessParentPanelLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProcessPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
        );

        jLabel5.setText("Network Usage");

        jLabel6.setText("Rx");

        jLabel7.setText("Tx");

        NetworkTransmitted.setText("0 b/s");

        NetworkRecieve.setText("0 b/s");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProcessParentPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProgressBarFileSystemUsage, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(ProgressBarCPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProgressBarSystemMemory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(NetworkRecieve)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(NetworkTransmitted)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProgressBarSystemMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(ProgressBarCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ProgressBarFileSystemUsage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(NetworkTransmitted)
                    .addComponent(NetworkRecieve))
                .addGap(18, 18, 18)
                .addComponent(ProcessParentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     * @throws org.hyperic.sigar.SigarException
     * @throws java.lang.InterruptedException
     */
    public static void main(String args[]) throws SigarException, InterruptedException {
            
        
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(SystemMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            
            Sigar sigar = new Sigar();
            NetworkData networkData = new NetworkData(sigar);
            ProcessesInfo processesInfo = new ProcessesInfo(sigar);
            
            SystemMonitor systemMonitor = new SystemMonitor();
            systemMonitor.ProgressBarFileSystemUsage.setStringPainted(true);
            systemMonitor.ProgressBarSystemMemory.setStringPainted(true);
            systemMonitor.ProgressBarCPU.setStringPainted(true);
            systemMonitor.TextAreaProcess.setEditable(false);
     //       systemMonitor.test(sigar);
            while(true)
            {   Mem mem = sigar.getMem();
                CpuPerc cpuTimer = sigar.getCpuPerc();
                FileSystemUsage filesystemusage = sigar.getFileSystemUsage("/");
                Long[] metric = networkData.getMetric();
                String[] ProcInfo = processesInfo.getProcessList();
            
                
                System.out.println("Memory "+mem.getUsedPercent());
                System.out.println("CPU "+cpuTimer.getCombined()*100);
                System.out.println("Rx " + Sigar.formatSize(metric[0])+ "\tTx "+Sigar.formatSize(metric[1]));
            
                systemMonitor.ProgressBarSystemMemory.setValue((int) (mem.getUsedPercent()));
                systemMonitor.ProgressBarCPU.setValue((int)(cpuTimer.getCombined()*100));
                systemMonitor.ProgressBarFileSystemUsage.setValue((int)(filesystemusage.getUsePercent()) );
                systemMonitor.TextAreaProcess.setText("");
                systemMonitor.NetworkRecieve.setText(Sigar.formatSize(metric[0]) + "/s");
                systemMonitor.NetworkTransmitted.setText(Sigar.formatSize(metric[1]) + "/s");
                systemMonitor.TextAreaProcess.setText(getString(ProcInfo));
                TimeUnit.SECONDS.sleep(1);
            }


        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NetworkRecieve;
    private javax.swing.JLabel NetworkTransmitted;
    private javax.swing.JScrollPane ProcessPanel;
    private javax.swing.JPanel ProcessParentPanel;
    private javax.swing.JProgressBar ProgressBarCPU;
    private javax.swing.JProgressBar ProgressBarFileSystemUsage;
    private javax.swing.JProgressBar ProgressBarSystemMemory;
    private javax.swing.JTextArea TextAreaProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollBar jScrollBar1;
    // End of variables declaration//GEN-END:variables

    private static String getString(String[] Proc) 
    {      String A = "";   
        for(int i=0;i<Proc.length;++i)
            A+=Proc[i]+"\n";
        return A;
    
    }  

   
}
